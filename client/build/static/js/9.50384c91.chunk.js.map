{"version":3,"sources":["chat/Discussion.jsx","actions/chat_actions.js","chat/Sidebar.jsx","chat/Chat.jsx"],"names":["Discussion","partner","useState","text","setText","messages","setMessages","chatId","setChatId","chats","useSelector","state","textinput","useRef","lastMsg","dispatch","useDispatch","partnerId","useParams","socket","io","useEffect","current","scrollIntoView","behavior","on","dataFromServer","console","log","emit","data","newMsg","type","CHAT_ADD_SUCCESS","payload","activeChat","filter","chat","chatUsers","_id","className","src","image","startsWith","alt","firstName","lastName","map","msg","userId","format","parseISO","timeStamp","ref","onSubmit","e","preventDefault","input","timestamp","Date","now","a","CHAT_ACTION_START","axios","post","configHeaders","CHAT_ACTION_ERROR","focus","value","onChange","target","placeholder","Icon","name","Sidebar","profile","auth","history","useHistory","msgSender","length","onClick","push","user","Chat","partners","goal","get","CHAT_LOAD_SUCCESS"],"mappings":"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","file":"static/js/9.50384c91.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Icon } from \"semantic-ui-react\";\r\nimport \"./Discussion.css\";\r\nimport { addMsg } from \"../actions/chat_actions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { CHAT_ADD_SUCCESS } from \"../actions/actionsTypes\";\r\nimport { parseISO, format } from \"date-fns\";\r\nimport { io } from \"socket.io-client\";\r\n\r\nexport default function Discussion({ partner }) {\r\n  const [text, setText] = useState(\"\");\r\n  const [messages, setMessages] = useState([]);\r\n  const [chatId, setChatId] = useState(null);\r\n  const { chats } = useSelector((state) => state.chats);\r\n  const textinput = useRef();\r\n  const lastMsg = useRef();\r\n  const dispatch = useDispatch();\r\n  const partnerId = useParams().partnerId;\r\n  // const socket = io(\"https://make-it-happen-demo.herokuapp.com\");\r\n  const socket = io(\"http://localhost:3000\");\r\n\r\n  //scroll to the end of the conversation when the page is loaded\r\n  useEffect(() => {\r\n    lastMsg.current.scrollIntoView({ behavior: \"smooth\" });\r\n    socket.on(\"messageFromServer\", (dataFromServer) => {\r\n      console.log(dataFromServer);\r\n      socket.emit(\"dataToServer\", { data: \"Data from the Client!\" });\r\n    });\r\n    // eslint-disable-next-line\r\n  }, []);\r\n  socket.on(\"sendMsg\", (newMsg) => {\r\n    console.log(\"msg received from server\", newMsg);\r\n    dispatch({ type: CHAT_ADD_SUCCESS, payload: newMsg });\r\n  });\r\n  //load the chat messages\r\n  useEffect(() => {\r\n    let activeChat = chats?.filter(\r\n      (chat) =>\r\n        chat.chatUsers[0]?._id === partnerId ||\r\n        chat.chatUsers[1]?._id === partnerId\r\n    )[0];\r\n    setChatId(activeChat?._id);\r\n    setMessages(activeChat?.messages);\r\n  }, [chats, partner?._id, dispatch, partnerId]);\r\n\r\n  //scroll down in each update of messages\r\n  useEffect(() => {\r\n    lastMsg.current.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n  // Connected, let's sign-up for to receive messages for this room\r\n  useEffect(() => {\r\n    if (chatId) {\r\n      // socket.on(\"connect\", function () {\r\n      // socket.emit(\"join-room\", chatId);\r\n      //   console.log(\"chat room created on client side\", chatId);\r\n      // });\r\n    }\r\n\r\n    // eslint-disable-next-line\r\n  }, [chatId]);\r\n\r\n  //save the msg with request to the database\r\n  const sendMsg = (e) => {\r\n    e.preventDefault();\r\n    let data = { text, partnerId: partner._id, timestamp: Date.now() };\r\n    dispatch(addMsg(data));\r\n    // socket.emit(\"add-msg\", data);\r\n\r\n    setText(\"\");\r\n    textinput.current.focus();\r\n  };\r\n\r\n  return (\r\n    <div className=\"discussion\">\r\n      <div className=\"discussion__header\">\r\n        <img\r\n          src={\r\n            partner?.image.startsWith(\"http\")\r\n              ? `${partner?.image}`\r\n              : `https://make-it-happen-demo.herokuapp.com/${partner?.image}`\r\n          }\r\n          alt=\"\"\r\n          className=\"discussion__img\"\r\n        />\r\n        <div className=\"discussion__header-info\">\r\n          <p className=\"discussion__header-user\">\r\n            {partner?.firstName + \" \" + partner?.lastName}\r\n          </p>\r\n          {/* <p className=\"discussion__header-msg\">last seen at</p> */}\r\n        </div>\r\n      </div>\r\n      <div className=\"discussion__body\">\r\n        {messages?.map((msg) => (\r\n          <div\r\n            key={msg._id}\r\n            className={\r\n              \"discussion__msg \" + (msg?.userId !== partner._id ? \"sent\" : \" \")\r\n            }\r\n          >\r\n            <p className=\"discussion__msg-text\">{msg.text}</p>\r\n            <p className=\"discussion__msg-time\">\r\n              {format(parseISO(msg.timeStamp), \"HH:mm\")}\r\n            </p>\r\n          </div>\r\n        ))}\r\n        <div ref={lastMsg}></div>\r\n      </div>\r\n      <div>\r\n        <form onSubmit={sendMsg} className=\"discussion__footer\">\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Type a message\"\r\n            className=\"discussion__input\"\r\n            ref={textinput}\r\n          />\r\n          <button className=\"btnSend\">\r\n            <Icon name=\"send\" />\r\n            Send\r\n          </button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import {\r\n  CHAT_ACTION_ERROR,\r\n  CHAT_LOAD_SUCCESS,\r\n  CHAT_ACTION_START,\r\n} from \"./actionsTypes\";\r\nimport { configHeaders } from \"./config\";\r\nimport axios from \"axios\";\r\n\r\nexport const addMsg = (input) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: CHAT_ACTION_START });\r\n      await axios.post(\"/api/msg/add\", input, configHeaders());\r\n    } catch (error) {\r\n      dispatch({ type: CHAT_ACTION_ERROR, payload: error });\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadChats = () => {\r\n  return async (dispatch) => {\r\n    try {\r\n      dispatch({ type: CHAT_ACTION_START });\r\n      let { data } = await axios.get(\"/api/msg/\", configHeaders());\r\n      dispatch({ type: CHAT_LOAD_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: CHAT_ACTION_ERROR, payload: error });\r\n    }\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\n// import { Icon } from \"semantic-ui-react\";\r\nimport \"./Sidebar.css\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nexport default function Sidebar() {\r\n  const { chats } = useSelector((state) => state.chats);\r\n  const { profile } = useSelector((state) => state.auth);\r\n  const history = useHistory();\r\n\r\n  const msgSender = (chat) => {\r\n    let msgUserId = chat?.messages[chat.messages.length - 1].userId;\r\n    let userId = profile?._id;\r\n    if (msgUserId === userId) return \"You : \";\r\n  };\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <h2>Discussions</h2>\r\n      {chats.map((chat) => (\r\n        <div\r\n          className=\"sidebar__discussion\"\r\n          key={chat._id}\r\n          onClick={() =>\r\n            history.push(`/chat/${partner(chat.chatUsers, profile._id)._id}`)\r\n          }\r\n        >\r\n          <img\r\n            src={\r\n              partner(chat?.chatUsers, profile?._id)?.image.startsWith(\"http\")\r\n                ? `${partner(chat?.chatUsers, profile?._id)?.image}`\r\n                : `https://make-it-happen-demo.herokuapp.com/${\r\n                    partner(chat.chatUsers, profile?._id)?.image\r\n                  }`\r\n            }\r\n            alt=\"\"\r\n            className=\"sidebar__discussion-img\"\r\n          />\r\n          <div className=\"sidebar__msg\">\r\n            <p className=\"sidebar__name\">\r\n              {partner(chat?.chatUsers, profile._id).firstName +\r\n                \"  \" +\r\n                partner(chat?.chatUsers, profile._id).lastName}\r\n            </p>\r\n            <p>\r\n              {msgSender(chat)}\r\n              {chat?.messages[chat.messages.length - 1].text}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst partner = (chatUsers, userId) => {\r\n  return chatUsers.filter((user) => user._id !== userId)[0];\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router\";\r\nimport { loadChats } from \"../actions/chat_actions\";\r\nimport \"./Chat.css\";\r\nimport Discussion from \"./Discussion\";\r\nimport Sidebar from \"./Sidebar\";\r\n\r\nexport default function Chat() {\r\n  const { partners } = useSelector((state) => state.goal);\r\n  const partnerId = useParams().partnerId;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(loadChats());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <Sidebar />\r\n      <Discussion\r\n        partner={partners?.filter((partner) => partner._id === partnerId)[0]}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}